//클래스 이름 : MusicInfo
//멤버변수 : 
//String title 곡명
//long  palytime 재생시간을 초단위로 저장
//String artist 가수명
//생성자 : 매개변수가 3개, 곡명, 가수, 재생시간을 전달 받아 저장
//메서드 : 
//toString 오버라이딩 멤버변수를 문자열로 반환
public class MusicInfo {
	
	String title;
	
	String artist;
	long playtime;
	String strPlaytime;
	
	MusicInfo(String title, long playtime, String artist) {
		this.title = title;
		this.artist = artist;
		this.playtime = playtime;
	}
	
	String formatTime(long sec) {
		long m, h;
		String time;
		
		m = sec/60;
		sec = sec%60;
		h = m/60;
		m = m %60;
		
		time = (h>0) ? h+"시간 " : "";
		return time + m + "분 " + sec + "초";
	}
	
	@Override
	public java.lang.String toString() {
		return title + ", " + artist + ", " + "재생시간: " + formatTime(playtime) ;
	}
	
}

//---------------------------------------------------
//클래스이름 : MusicInfoEx
//조상클래스 : MusicInfo
//멤버변수 : 
//String album_title 수록된 앨범명
//생성자 : 매개변수가 4개, 곡명, 가수, 재생시간, 앨범명을 전달받아 저장
//메서드 :
//toString 오버라이딩 멤버변수를 문자열로 저장, super를 활용
class MusicInfoEx extends MusicInfo{
	
	String album_title;
	
	MusicInfoEx(String title, long playtime, String artist, String album_title) {
		super(title, playtime, artist);
		this.album_title = album_title;
	}
	
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return super.toString() + ", 앨범명: " + album_title;
	}
	
}
public class TestMain {
	public static void main(String[] args) {
	MusicInfo ms = new MusicInfo("신호등", 232, "이무진");
	System.out.println(ms);
	
	MusicInfoEx ms2 = new MusicInfoEx("신호등", 232, "이무진", "신호등");
	System.out.println(ms2);
	}
}
--------------------------------------------------------------------------------------------------------------------------------------
public class TestPoly1 {
	
	public static void main(String[] args) {
		
		CaptionTv ctv = new CaptionTv();
		ctv.caption();
		ctv.channelDown();
		
		Tv t2 = new CaptionTv();
		t2.channelUp();
//		t2.caption();
		
	}

}

class CaptionTv extends Tv{
	String text;
	void caption() {
		System.out.println("캡션기능");
	}
}

class Tv{
	int channel;
	boolean power;
	
	void power() {	power = !power;}
	void channelUp() {	channel++;}
	void channelDown() { channel--;	}
	
}
public class TestPoly2 {

	public static void main(String[] args) {
		Car c;
		FireEngine f ;
		Ambulance a = new Ambulance();
		
//		f = (FireEngine)a; // 두 클래스 사이에는 상속 관계가 성립하지 않기 때문에 형변환이 불가

		c = a;				// 자동 형변환
		a = (Ambulance) c; 	// 형변환연산을 적용
			
		if ( c instanceof FireEngine)		{
			System.out.println("FireEngine");
			
		}else if( c instanceof Ambulance) {
			System.out.println("Ambulance");
			
		}
	}
}

class Car{
	String color;
	int door;
	
	void drive() {	}
	void stop() {	}
}
class FireEngine extends Car{
	void water() { 
		System.out.println("water");
	}
}
class Ambulance extends Car{
	void siren() {
		System.out.println("siren");
	}
}
public class TestBuy {
	public static void main(String args[]) {
		Buyer b = new Buyer();

		b.buy(new Tv());
		b.buy(new Computer());

		System.out.println("남은 돈" + b.money + "만원입니다.");
		System.out.println("보너스" + b.bonusPoint + "점입니다.");
		}
}

class Product {
	int price;
	int bonusPoint;

	Product(int price) {
		this.price = price;
		bonusPoint = (int) (price / 10.0);
	}
}

class Tv extends Product {
	Tv() {
		super(100);
	}

	public String toString() {
		return "Tv";
	}
}

class Computer extends Product {
	Computer() {
		super(200);
	}

	public String toString() {
		return "Computer";
	}
}

class Buyer {
	int money = 1000;
	int bonusPoint = 0;

	void buy(Product p) {
		if (money < p.price) {
			System.out.println("잔액부족");
			return;
		}

		money -= p.price;
		bonusPoint += p.bonusPoint;
		System.out.println(p + "을/를 구입하셨습니다.");
	}
}
import java.util.Scanner;

public class TestBuy2 {

	public static void main(String[] args) {
		//길이가 10인 배열을 만든다
		//사용자로부터 숫자 1이 입력하면 Tv, 2는 컴퓨터
		//사용자가 선택한 제품의 인스턴스를 만들어서 배열에 저장하시요
		Product arr[] = new Product[4];
		Scanner sc = new Scanner(System.in);
		int n=0; int index = 0;
		while(index<arr.length) {
			n = sc.nextInt();
			switch(n) {
			case 1:
				arr[index] = new Tv();
				break;
			case 2:
				arr[index] = new Computer();
				break;
			}
			index++;
		}
		
		for(int i = 0 ; i < arr.length ; i++) {
			System.out.println(arr[i]);
		}
		return;
		
	}

}

public class MusicPlayer {
	
	static MusicPlayer mp = null;
	
	private MusicPlayer() {
	}
	
	static MusicPlayer getInstance() {
		if(mp==null) {
			mp = new MusicPlayer();
		}
		
		return mp;
	}
}
public class TestMain {
	
	public static void main(String[] args) {
		
		MusicPlayer mp1 = MusicPlayer.getInstance();
		MusicPlayer mp2 = MusicPlayer.getInstance();
		MusicPlayer mp3 = MusicPlayer.getInstance();
		
		System.out.println(mp1);
		System.out.println(mp2);
		System.out.println(mp3);

	}

}

class MusicPlayer {
	
	private MusicPlayer() {
	}
	
	static MusicPlayer mp = null;
	static MusicPlayer getInstance() {
		if(mp==null) {
			mp = new MusicPlayer();
		}
		
		return mp;
	}

}


